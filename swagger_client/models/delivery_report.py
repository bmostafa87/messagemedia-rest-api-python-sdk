# coding: utf-8

"""
    MessageMedia REST API

    Australiaâ€™s Leading Messaging Solutions for Business and Enterprise.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DeliveryReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, delay=None, delivery_report_id=None, date_received=None, message_id=None, source_number=None, status=None, username=None):
        """
        DeliveryReport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'delay': 'int',
            'delivery_report_id': 'str',
            'date_received': 'datetime',
            'message_id': 'str',
            'source_number': 'str',
            'status': 'str',
            'username': 'str'
        }

        self.attribute_map = {
            'delay': 'delay',
            'delivery_report_id': 'delivery_report_id',
            'date_received': 'date_received',
            'message_id': 'message_id',
            'source_number': 'source_number',
            'status': 'status',
            'username': 'username'
        }

        self._delay = delay
        self._delivery_report_id = delivery_report_id
        self._date_received = date_received
        self._message_id = message_id
        self._source_number = source_number
        self._status = status
        self._username = username

    @property
    def delay(self):
        """
        Gets the delay of this DeliveryReport.
        Not used

        :return: The delay of this DeliveryReport.
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """
        Sets the delay of this DeliveryReport.
        Not used

        :param delay: The delay of this DeliveryReport.
        :type: int
        """

        self._delay = delay

    @property
    def delivery_report_id(self):
        """
        Gets the delivery_report_id of this DeliveryReport.
        Unique identifier of this delivery report.

        :return: The delivery_report_id of this DeliveryReport.
        :rtype: str
        """
        return self._delivery_report_id

    @delivery_report_id.setter
    def delivery_report_id(self, delivery_report_id):
        """
        Sets the delivery_report_id of this DeliveryReport.
        Unique identifier of this delivery report.

        :param delivery_report_id: The delivery_report_id of this DeliveryReport.
        :type: str
        """

        self._delivery_report_id = delivery_report_id

    @property
    def date_received(self):
        """
        Gets the date_received of this DeliveryReport.
        Date time when the delivery report was received in ISO8601 format.

        :return: The date_received of this DeliveryReport.
        :rtype: datetime
        """
        return self._date_received

    @date_received.setter
    def date_received(self, date_received):
        """
        Sets the date_received of this DeliveryReport.
        Date time when the delivery report was received in ISO8601 format.

        :param date_received: The date_received of this DeliveryReport.
        :type: datetime
        """

        self._date_received = date_received

    @property
    def message_id(self):
        """
        Gets the message_id of this DeliveryReport.
        Unique identifier of the message that this delivery report was matched to.

        :return: The message_id of this DeliveryReport.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """
        Sets the message_id of this DeliveryReport.
        Unique identifier of the message that this delivery report was matched to.

        :param message_id: The message_id of this DeliveryReport.
        :type: str
        """

        self._message_id = message_id

    @property
    def source_number(self):
        """
        Gets the source_number of this DeliveryReport.
        Address from which this delivery report was received.

        :return: The source_number of this DeliveryReport.
        :rtype: str
        """
        return self._source_number

    @source_number.setter
    def source_number(self, source_number):
        """
        Sets the source_number of this DeliveryReport.
        Address from which this delivery report was received.

        :param source_number: The source_number of this DeliveryReport.
        :type: str
        """

        if not source_number:
            raise ValueError("Invalid value for `source_number`, must not be `None`")
        if len(source_number) > 15:
            raise ValueError("Invalid value for `source_number`, length must be less than `15`")
        if len(source_number) < 1:
            raise ValueError("Invalid value for `source_number`, length must be greater than or equal to `1`")

        self._source_number = source_number

    @property
    def status(self):
        """
        Gets the status of this DeliveryReport.
        The status of the message as per the delivery report.

        :return: The status of this DeliveryReport.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this DeliveryReport.
        The status of the message as per the delivery report.

        :param status: The status of this DeliveryReport.
        :type: str
        """

        self._status = status

    @property
    def username(self):
        """
        Gets the username of this DeliveryReport.
        Username that received this reply.

        :return: The username of this DeliveryReport.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this DeliveryReport.
        Username that received this reply.

        :param username: The username of this DeliveryReport.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
